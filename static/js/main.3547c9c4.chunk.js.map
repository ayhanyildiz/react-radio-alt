{"version":3,"sources":["SegmentedControl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SegmentedControl","props","handleOptionChange","event","setState","checkedOption","target","value","sendData","state","defaultTo","values","includes","className","this","segmentLabel","map","checked","index","key","type","onChange","Component","App","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAoEeA,G,kBA7CX,WAAYC,GAAe,IAAD,8BACtB,4CAAMA,KAQVC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CACVC,cAAeF,EAAMG,OAAOC,QAG5B,EAAKN,MAAMO,UACX,EAAKP,MAAMO,SAASL,EAAMG,OAAOC,QAZrC,EAAKE,MAAQ,CACTJ,cAAeJ,EAAMS,WAAaT,EAAMU,OAAOC,SAASX,EAAMS,WAC1DT,EAAMS,UAAYT,EAAMU,OAAO,IALjB,E,sEAmBhB,IAAD,OACL,OACI,yBAAKE,UAAU,oBACX,0BAAMA,UAAU,2BAA2BC,KAAKb,MAAMc,cACtD,0BAAMF,UAAU,+BACXC,KAAKb,MAAMU,OAAOK,IAAI,SAACC,EAASC,GAC7B,OACI,2BACIC,IAAKD,EACLL,UAAW,EAAKJ,MAAMJ,gBAAkBY,EAAU,UAAY,IAE9D,2BACIG,KAAK,QACLb,MAAOU,EACPA,QAAS,EAAKR,MAAMJ,gBAAkBY,EACtCI,SAAU,EAAKnB,qBARvB,UAUQe,Y,GAtCLK,cCiBhBC,G,MAlCO,WAKpB,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,wDAEF,0BAAMA,UAAU,YACd,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAkBE,aAAa,eAAeJ,OAAQ,CAAC,SAAU,cAAe,cAChF,kBAAC,EAAD,CAAkBI,aAAa,SAASJ,OAAQ,CAAC,OAAQ,YACzD,kBAAC,EAAD,CAAkBI,aAAa,mBAAmBJ,OAAQ,CAAC,IAAI,IAAI,IAAI,KAAMD,UAAU,MACvF,kBAAC,EAAD,CAAkBK,aAAa,uBAAuBJ,OAAQ,CAAC,OAAQ,YAE3E,yBAAKE,UAAU,oBACX,kBAAC,EAAD,CAAkBE,aAAa,eAAeJ,OAAQ,CAAC,SAAU,cAAe,cAChF,kBAAC,EAAD,CAAkBI,aAAa,SAASJ,OAAQ,CAAC,OAAQ,YACzD,kBAAC,EAAD,CAAkBI,aAAa,mBAAmBJ,OAAQ,CAAC,IAAI,IAAI,IAAI,KAAMD,UAAU,OAE3F,yBAAKG,UAAU,oBACX,kBAAC,EAAD,CAAkBE,aAAa,eAAeJ,OAAQ,CAAC,SAAU,cAAe,cAChF,kBAAC,EAAD,CAAkBI,aAAa,SAASJ,OAAQ,CAAC,OAAQ,aAE7D,yBAAKE,UAAU,oBACX,kBAAC,EAAD,CAAkBL,SA1BP,SAACgB,GACdC,QAAQC,IAAIF,IAyB2BT,aAAa,eAAeJ,OAAQ,CAAC,SAAU,cAAe,mBCnBzFgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3547c9c4.chunk.js","sourcesContent":["import React, { Component, ChangeEvent } from 'react';\nimport './SegmentedContorl.scss';\n\n// array with min 2 length https://github.com/Microsoft/TypeScript/issues/23528\ntype ArrayTwoOrMore<T> = {\n    0: T\n    1: T\n} & Array<T>\n\n\ninterface State {\n    checkedOption: string;\n}\n\ninterface Props {\n    values: ArrayTwoOrMore<string>;\n    segmentLabel: string;\n    defaultTo?: string;\n    sendData?(data: any): void;\n}\n\nclass SegmentedControl extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            checkedOption: props.defaultTo && props.values.includes(props.defaultTo) ?\n                props.defaultTo : props.values[0]\n        };\n    }\n\n    handleOptionChange = (event: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            checkedOption: event.target.value\n        });\n\n        if (this.props.sendData) {\n            this.props.sendData(event.target.value)\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"SegmentedControl\">\n                <span className=\"SegmentedControl-header\">{this.props.segmentLabel}</span>\n                <span className=\"SegmentedControl-controlBox\">\n                    {this.props.values.map((checked, index) => {\n                        return (\n                            <label\n                                key={index}\n                                className={this.state.checkedOption === checked ? 'checked' : ''}\n                            >\n                                <input\n                                    type=\"radio\"\n                                    value={checked}\n                                    checked={this.state.checkedOption === checked}\n                                    onChange={this.handleOptionChange}\n                                />\n                                {`${checked}`}\n                            </label>\n                        )\n                    })}\n                </span>\n            </div>)\n    }\n}\n\nexport default SegmentedControl;\n","import React from 'react';\nimport SegmentedControl from './SegmentedControl';\nimport './App.scss';\n\nconst App: React.FC = () => {\n    const getData =  (data: any) => {\n        console.log(data);\n    };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Pretty Radio box groups</h1>\n      </header>\n      <main className=\"App-main\">\n        <div className=\"App-main-samples\">\n          <SegmentedControl segmentLabel=\"Payment Type\" values={['PayPal', 'Credit Card', 'Net Term']}/>\n          <SegmentedControl segmentLabel=\"gender\" values={['Male', 'Female']}/>\n          <SegmentedControl segmentLabel=\"number selection\" values={['1','2','3','4']} defaultTo=\"3\"/>\n          <SegmentedControl segmentLabel=\"true false selection\" values={['true', 'false']}/>\n        </div>\n      <div className=\"App-main-samples\">\n          <SegmentedControl segmentLabel=\"Payment Type\" values={['PayPal', 'Credit Card', 'Net Term']}/>\n          <SegmentedControl segmentLabel=\"gender\" values={['Male', 'Female']}/>\n          <SegmentedControl segmentLabel=\"number selection\" values={['1','2','3','4']} defaultTo=\"3\"/>\n      </div>\n      <div className=\"App-main-samples\">\n          <SegmentedControl segmentLabel=\"Payment Type\" values={['PayPal', 'Credit Card', 'Net Term']}/>\n          <SegmentedControl segmentLabel=\"gender\" values={['Male', 'Female']}/>\n      </div>\n      <div className=\"App-main-samples\">\n          <SegmentedControl sendData={getData} segmentLabel=\"Payment Type\" values={['PayPal', 'Credit Card', 'Net Term']}/>\n      </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}